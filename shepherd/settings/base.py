"""
Django settings for shepherd project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import json
import os
import sys
from pathlib import Path
import logging.config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
PROJECT_PACKAGE = Path(__file__).resolve().parent.parent
BASE_DIR = PROJECT_PACKAGE.parent

data_dir_key = "SHEPHERD_DATA_DIR"
DATA_DIR = (
    Path(os.environ["data_dir_key"]) if data_dir_key in os.environ else BASE_DIR.parent
)

# try:
#     with DATA_DIR.joinpath('conf', 'shepherd_secrets.json').open() as handle:
#         SECRETS = json.load(handle)
# except IOError:
#     SECRETS = {
#         'secret_key': 'a',
#     }

DEFAULT_FROM_EMAIL = os.environ["default_from_email"]

EMAIL_BACKEND = "django_ses.SESBackend"
AWS_SES_ACCESS_KEY_ID = os.environ["aws_ses_access_key_id"]
AWS_SES_SECRET_ACCESS_KEY = os.environ["aws_ses_secret_access_key"]
AWS_SES_AUTO_THROTTLE = None

DATE_FORMAT = os.getenv("DATE_FORMAT")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.getenv("django_secret_key"))


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "graphene_django",
    "bootstrap4",
    "djstripe",
    "martor",
    "timezone_field",
    "fcm_django",
    "activity",
    "plan",
    "work_order",
    "crop",
    "equipment",
    "farm",
    "field",
    "general",
    "image",
    "inventory",
    "task",
    "user",
]

AUTH_USER_MODEL = "user.ShepherdUser"

GRAPHENE = {
    "SCHEMA": "shepherd.schema.schema",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ],
}

GRAPHQL_JWT = {
    "JWT_ALLOW_ARGUMENT": True,
}

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DATABASE_ENGINE"),
        "NAME": "shepherd",
        "HOST": os.getenv("db_host"),
        "PORT": os.getenv("db_port"),
        "USER": os.getenv("db_username"),
        "PASSWORD": os.getenv("db_password"),
        "OPTIONS": {"options": "-c search_path=shepherd,public"},
    },
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "shepherd.middleware.AuditTrackMiddleware",
]

ROOT_URLCONF = "shepherd.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

CRISPY_TEMPLATE_PACK = "bootstrap5"
TEST_RUNNER = "snapshottest.django.TestRunner"

TESTING = "test" in sys.argv[1:]
if TESTING:
    print("=========================")
    print("In TEST Mode - Disableling Migrations")
    print("=========================")

    class DisableMigrations(object):
        def __contains__(self, item):
            return True

        def __getitem__(self, item):
            pass

    MIGRATION_MODULES = DisableMigrations()

WSGI_APPLICATION = "shepherd.wsgi.application"


AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",
    "django.contrib.auth.backends.ModelBackend",
]


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

ALLOWED_HOSTS = ["0.0.0.0", "127.0.0.1", "*"]


DEBUG = os.getenv("DEBUG", False)

### Logging Configuration ###

# Clear prev config
LOGGING_CONFIG = None

# Get log level from env
LOGLEVEL = os.getenv("DJANGO_LOGLEVEL", "info").upper()

logging.config.dictConfig(
    {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "console": {
                "format": "%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(module)s %(process)d %(thread)d %(message)s",
            },
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "formatter": "console",
            },
        },
        "loggers": {
            "": {
                "level": LOGLEVEL,
                "handlers": [
                    "console",
                ],
            },
        },
    }
)

FCM_DJANGO_SETTINGS = {"FCM_SERVER_KEY": "AIzaSyDXH1nq0NL_ojKMG_qamZD0UcXS4Sye3j0"}

PRIMARY_DOMAIN = os.getenv("PRIMARY_DOMAIN")

# Stripe settings
STRIPE_LIVE_MODE = os.getenv("STRIPE_LIVE_MODE")
DJSTRIPE_USE_NATIVE_JSONFIELD = os.getenv("DJSTRIPE_USE_NATIVE_JSONFIELD")
DJSTRIPE_FOREIGN_KEY_TO_FIELD = os.getenv("DJSTRIPE_FOREIGN_KEY_TO_FIELD")
DJSTRIPE_WEBHOOK_SECRET = os.getenv("DJSTRIPE_WEBHOOK_SECRET")
STRIPE_TEST_SECRET_KEY = os.getenv("STRIPE_TEST_SECRET_KEY")
STRIPE_TEST_PUBLIC_KEY = os.getenv("STRIPE_TEST_PUBLIC_KEY")
STRIPE_LIVE_SECRET_KEY = os.getenv("STRIPE_LIVE_SECRET_KEY")
STRIPE_LIVE_PUBLIC_KEY = os.getenv("STRIPE_LIVE_PUBLIC_KEY")


if STRIPE_LIVE_MODE is True:
    STRIPE_PUBLIC_KEY = STRIPE_LIVE_PUBLIC_KEY
    STRIPE_SECRET_KEY = STRIPE_LIVE_SECRET_KEY
else:
    STRIPE_PUBLIC_KEY = STRIPE_TEST_PUBLIC_KEY
    STRIPE_SECRET_KEY = STRIPE_TEST_SECRET_KEY

if DEBUG:
    try:
        import debug_toolbar
    except ImportError:
        pass
    else:
        INSTALLED_APPS.append("debug_toolbar")
        INTERNAL_IPS = ["127.0.0.1"]
        MIDDLEWARE.insert(
            MIDDLEWARE.index("django.middleware.common.CommonMiddleware") + 1,
            "debug_toolbar.middleware.DebugToolbarMiddleware",
        )
